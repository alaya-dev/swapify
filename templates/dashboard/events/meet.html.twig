{% extends 'base.html.twig' %} 

{% block title %}Rejoindre la session{% endblock %}

{% block stylesheets %}
    {{ parent() }}
    <style>
        #videosdkContainer {
            position: relative;
            width: 100%;
            height: 600px;
            margin: 20px 0;
        }
        .waiting-message {
            text-align: center;
            padding: 20px;
            background-color: #f8f9fa;
            border-radius: 5px;
            margin: 20px 0;
        }
        .modal {
        display: none;
        position: fixed;
        z-index: 1000;
        left: 0;
        top: 0;
        width: 100%;
        height: 100%;
        background-color: rgba(0, 0, 0, 0.5);
        justify-content: center;
        align-items: center;
    }

    .modal-content {
        background: white;
        padding: 20px;
        border-radius: 8px;
        text-align: center;
        width: 300px;
        box-shadow: 0px 0px 10px rgba(0, 0, 0, 0.2);
    }

    .modal-content h2 {
        margin-bottom: 10px;
    }

    .modal-content input {
        width: 100%;
        padding: 8px;
        margin: 10px 0;
        border: 1px solid #ccc;
        border-radius: 5px;
    }

    .modal-content button {
        background-color: #007bff;
        color: white;
        border: none;
        padding: 10px;
        margin: 5px;
        border-radius: 5px;
        cursor: pointer;
        width: 100px;
    }

    .modal-content button:hover {
        background-color: #0056b3;
    }

    #closeModal {
        background-color: #ccc;
        color: black;
    }
    </style>
{% endblock %}

{% block body %} 

{% if session.meetingStarted %}
    <div class="container">        
        <div id="videosdkContainer"></div>
    </div>
    <div id="attendanceModal" class="modal">
    <div class="modal-content">
        <h2>Confirmer votre présence</h2>
        <p>Veuillez entrer le code reçu par e-mail pour valider votre présence.</p>
        <input type="text" id="attendanceCodeInput" placeholder="Entrez votre code ici">
        <button id="submitAttendanceCode">Valider</button>
        <button id="closeModal">Annuler</button>
    </div>
</div>
{% else %}

    <div class="p-4 max-w-full">
    <div class="rounded-lg overflow-hidden shadow-lg border border-gray-100">
      <div class="bg-gradient-to-r from-green-500 to-emerald-600 text-white p-5 text-center">
        <h2 class="text-xl font-semibold">Notification d'Accès</h2>
      </div>
      <div class="bg-white p-6 text-center">
        <div class="text-4xl text-green-500 mb-4">
          <svg xmlns="http://www.w3.org/2000/svg" class="h-16 w-16 mx-auto" fill="none" viewBox="0 0 24 24" stroke="currentColor">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z" />
          </svg>
        </div>
        <p class="text-gray-800 font-bold mb-3">
          Vous ne pouvez pas entrer une session qui n'a pas encore commencé.
        </p>
        <p class="text-gray-600">
          Vous allez être notifié par adresse email dès que la session a été lancée par l'organisateur de l'événement.
        </p>
      </div>
    </div>
  </div>
{% endif %}
{% endblock %}

{% block javascripts %}
    {{ parent() }}
    <script>
    document.addEventListener("DOMContentLoaded", function () {
        const meetingId = "{{ meetingRoom }}";
        const isOrganizer = {{ isOrganizer ? 'true' : 'false' }};
        const displayName = "{{ app.user.email ?? 'Participant' }}";
        
        let meeting = null;
        
        function initializeVideoSDK() {
            var script = document.createElement("script");
            script.type = "text/javascript";
            
            script.addEventListener("load", function (event) {
                const config = {
                    name: displayName,
                    meetingId: meetingId,
                    apiKey: "{{ apiKey }}", // Pass this from controller
                    containerId: "videosdkContainer",
                    micEnabled: true,
                    webcamEnabled: true,
                    participantCanToggleSelfWebcam: true,
                    participantCanToggleSelfMic: true,
                    chatEnabled: true,
                    screenShareEnabled: true,
                    recordingEnabled: isOrganizer, // Only organizer can record
                   
                    participantCanLeave: true,
                    joinScreen: {
                        visible: false // Skip join screen
                    },
                    permissions: {
                        // Set appropriate permissions
                        endMeeting: isOrganizer,
                        drawOnWhiteboard: true,
                        toggleWhiteboard: isOrganizer,
                        changeLayout: true
                    },
                    layout: {
                        type: "GRID",
                        priority: "SPEAKER"
                    }
                };
                
                meeting = new VideoSDKMeeting();
                meeting.init(config);
                
                // Handle meeting start notification for organizer
                if (isOrganizer) {
                    // Notify server that meeting has started
                    fetch("{{ path('check_meeting_status', {id: session.id}) }}", {
                        method: "POST",
                        headers: {
                            "X-Requested-With": "XMLHttpRequest",
                            "Content-Type": "application/json"
                        }
                    });
                }
                


            });
            
            script.src = "https://sdk.videosdk.live/rtc-js-prebuilt/0.3.43/rtc-js-prebuilt.js";
            document.getElementsByTagName("head")[0].appendChild(script);
        }
        
        // For non-organizers, check meeting status before joining
        if (!isOrganizer) {
            function checkMeetingStatus() {
                fetch("{{ path('check_meeting_status', {id: session.id}) }}")
                    .then(response => response.json())
                    .then(data => {
                        if (data.meetingStarted) {
                            document.getElementById('waitingMessage')?.remove();
                            initializeVideoSDK();
                        } else {
                            setTimeout(checkMeetingStatus, 5000); // Check every 5 seconds
                        }
                    });
            }
            checkMeetingStatus();
        } else {
            // Organizer can join immediately
            initializeVideoSDK();
        }
    });
    document.addEventListener("DOMContentLoaded", function () {
        const modal = document.getElementById("attendanceModal");
        const closeModal = document.getElementById("closeModal");
        const submitButton = document.getElementById("submitAttendanceCode");
        
        // Show modal 15 minutes before the session ends
        if (!isOrganizer) {
            setTimeout(() => {
                modal.style.display = "flex";
            }, {{ (remainingMinutes - 15) * 60 * 1000 }}); // Convert minutes to milliseconds
        }


        closeModal.addEventListener("click", () => {
            modal.style.display = "none";
        });

        submitButton.addEventListener("click", () => {
            const code = document.getElementById("attendanceCodeInput").value.trim();
            
            if (code === "") {
                alert("Veuillez entrer un code valide.");
                return;
            }

            fetch("{{ path('validate_attendance', {id: attendance_id}) }}", {
                method: "POST",
                headers: {
                    "X-Requested-With": "XMLHttpRequest",
                    "Content-Type": "application/json"
                },
                body: JSON.stringify({ code: code })
            })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    alert("Votre présence a été confirmée.");
                    modal.style.display = "none";
                } else {
                    alert("Code incorrect. Veuillez réessayer.");
                }
            })
            .catch(error => console.error("Erreur lors de la validation :", error));
        });
    });
</script>
{% endblock %}

